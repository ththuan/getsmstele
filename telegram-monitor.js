const { Telegraf } = require('telegraf');
const EventEmitter = require('events');

class TelegramMonitor extends EventEmitter {
    constructor(botToken, groupId) {
        super();
        this.bot = new Telegraf(botToken);
        this.groupId = groupId;
        this.isMonitoring = false;
    }

    async start() {
        if (this.isMonitoring) return;

        console.log('ü§ñ B·∫Øt ƒë·∫ßu theo d√µi Telegram...');

        // L·∫Øng nghe tin nh·∫Øn trong group
        this.bot.on('text', (ctx) => {
            try {
                const message = ctx.message;
                const chatId = message.chat.id.toString();
                
                // Ki·ªÉm tra xem tin nh·∫Øn c√≥ t·ª´ group ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh kh√¥ng
                if (chatId === this.groupId || message.chat.username) {
                    const text = message.text;
                    console.log(`üì± Nh·∫≠n tin nh·∫Øn: ${text}`);
                    
                    // T√¨m referral code 8 k√Ω t·ª± (c√≥ th·ªÉ l√† ch·ªØ v√† s·ªë)
                    const referralCodes = this.extractReferralCodes(text);
                    
                    if (referralCodes.length > 0) {
                        referralCodes.forEach(code => {
                            console.log(`üéØ T√¨m th·∫•y referral code: ${code}`);
                            this.emit('referralCodeFound', code);
                        });
                    }
                }
            } catch (error) {
                console.error('‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn Telegram:', error);
            }
        });

        // B·∫Øt ƒë·∫ßu bot
        await this.bot.launch();
        this.isMonitoring = true;
        
        console.log('‚úÖ Telegram monitor ƒë√£ kh·ªüi ƒë·ªông');
    }

    extractReferralCodes(text) {
        const codes = [];
        
        // Pattern 1: T√¨m code 8 k√Ω t·ª± ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p c·ª• th·ªÉ
        const patterns = [
            /referral[:\s]*([A-Za-z0-9]{8})/gi,
            /ref[:\s]*([A-Za-z0-9]{8})/gi,
            /code[:\s]*([A-Za-z0-9]{8})/gi,
            /\b([A-Za-z0-9]{8})\b/g  // B·∫•t k·ª≥ chu·ªói 8 k√Ω t·ª± n√†o ƒë·ª©ng m·ªôt m√¨nh
        ];

        patterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(text)) !== null) {
                const code = match[1];
                // Ki·ªÉm tra xem code c√≥ h·ª£p l·ªá kh√¥ng (kh√¥ng ph·∫£i to√†n s·ªë ho·∫∑c to√†n ch·ªØ)
                if (this.isValidReferralCode(code)) {
                    codes.push(code);
                }
            }
        });

        // Lo·∫°i b·ªè duplicate
        return [...new Set(codes)];
    }

    isValidReferralCode(code) {
        // Ki·ªÉm tra ƒë·ªô d√†i
        if (code.length !== 8) return false;
        
        // Ki·ªÉm tra c√≥ c·∫£ s·ªë v√† ch·ªØ
        const hasNumber = /\d/.test(code);
        const hasLetter = /[A-Za-z]/.test(code);
        
        // Ph·∫£i c√≥ c·∫£ s·ªë v√† ch·ªØ (kh√¥ng ƒë∆∞·ª£c to√†n s·ªë ho·∫∑c to√†n ch·ªØ)
        return hasNumber && hasLetter;
    }

    stop() {
        if (this.bot) {
            this.bot.stop();
            this.isMonitoring = false;
            console.log('üõë D·ª´ng theo d√µi Telegram');
        }
    }
}

module.exports = TelegramMonitor;
