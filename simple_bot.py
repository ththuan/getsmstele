#!/usr/bin/env python3
"""
SoDEX Bot - Phi√™n b·∫£n ƒë∆°n gi·∫£n kh√¥ng c·∫ßn Telegram API
Ch·ªâ c·∫ßn nh·∫≠p code th·ªß c√¥ng
"""

import requests
import json
import time
import os
from dotenv import load_dotenv
from eth_account import Account

# Load environment variables
load_dotenv()

class SoDEXBot:
    def __init__(self):
        self.url = "https://test-vex-v1.sodex.dev/biz/task/referral/join"
        self.headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        # Load private keys
        private_keys = os.getenv('PRIVATE_KEY', '').split(',')
        self.wallets = []
        
        for key in private_keys:
            key = key.strip()
            if key and key != 'your_private_key_here':
                try:
                    account = Account.from_key(key)
                    self.wallets.append({
                        'key': key,
                        'address': account.address,
                        'used': False
                    })
                    print(f"‚úÖ Loaded wallet: {account.address}")
                except Exception as e:
                    print(f"‚ùå Invalid private key: {key[:10]}... - {e}")
        
        if not self.wallets:
            print("‚ùå Kh√¥ng c√≥ v√≠ h·ª£p l·ªá n√†o!")
            exit(1)
        
        print(f"üéØ ƒê√£ load {len(self.wallets)} v√≠")

    def verify_code(self, code, wallet):
        """Verify referral code v·ªõi m·ªôt wallet"""
        payload = {
            "referralCode": code,
            "walletAddress": wallet['address']
        }
        
        try:
            response = requests.post(
                self.url,
                headers=self.headers,
                data=json.dumps(payload),
                timeout=10
            )
            result = response.json()
            
            if result.get("code") == 20003:
                print(f"[USED]     ‚û§ {code} - {wallet['address'][:10]}... (ƒê√É S·ª¨ D·ª§NG)")
                return "used"
            elif result.get("code") == 20002:
                print(f"[INVALID]  ‚û§ {code} - {wallet['address'][:10]}... (KH√îNG T·ªíN T·∫†I)")
                return "invalid"
            else:
                print(f"[SUCCESS ‚úÖ] ‚û§ {code} - {wallet['address']} | RESPONSE: {result}")
                with open("success.txt", "a") as f:
                    f.write(f"{code} - {wallet['address']} - {result}\n")
                return "success"
                
        except Exception as e:
            print(f"[ERROR] ‚û§ {code} - {wallet['address'][:10]}... | Error: {e}")
            return "error"

    def run_manual(self):
        """Ch·∫ø ƒë·ªô nh·∫≠p code th·ªß c√¥ng"""
        print("\nüöÄ CH·∫†Y CH·ªÇ ƒê·ªò TH·ª¶ C√îNG")
        print("Nh·∫≠p 'quit' ƒë·ªÉ tho√°t")
        print("=" * 40)
        
        while True:
            # Ki·ªÉm tra c√≤n v√≠ n√†o ch∆∞a d√πng
            available_wallets = [w for w in self.wallets if not w['used']]
            if not available_wallets:
                print("‚ùå T·∫•t c·∫£ v√≠ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!")
                break
            
            print(f"\nüíº C√≤n {len(available_wallets)} v√≠ available")
            code = input("Nh·∫≠p referral code (8 k√Ω t·ª±): ").strip()
            
            if code.lower() == 'quit':
                break
            
            if len(code) != 8:
                print("‚ùå Code ph·∫£i c√≥ ƒë√∫ng 8 k√Ω t·ª±!")
                continue
            
            # L·∫•y v√≠ ƒë·∫ßu ti√™n ch∆∞a d√πng
            wallet = available_wallets[0]
            result = self.verify_code(code, wallet)
            
            if result == "success":
                wallet['used'] = True
                print(f"üéâ Th√†nh c√¥ng! V√≠ {wallet['address'][:10]}... ƒë√£ ƒë∆∞·ª£c verify")
            elif result in ["used", "invalid"]:
                print("üîÑ Th·ª≠ v√≠ ti·∫øp theo...")

if __name__ == "__main__":
    bot = SoDEXBot()
    bot.run_manual()
