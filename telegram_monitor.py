"""
Module theo d√µi Telegram ƒë·ªÉ l·∫•y referral codes
"""
import requests
import re
import time
import threading
from datetime import datetime

class TelegramMonitor:
    def __init__(self, bot_token, chat_id):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.last_update_id = 0
        self.running = False
        
    def get_updates(self):
        """L·∫•y tin nh·∫Øn m·ªõi t·ª´ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'limit': 100,
                'timeout': 30
            }
            
            response = requests.get(url, params=params, timeout=35)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói Telegram API: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Telegram: {e}")
            return None
    
    def extract_codes(self, text):
        """Tr√≠ch xu·∫•t codes 8 k√Ω t·ª± t·ª´ text"""
        # Pattern: 8 k√Ω t·ª± g·ªìm ch·ªØ v√† s·ªë, kh√¥ng ph·∫£i to√†n ch·ªØ ho·∫∑c to√†n s·ªë
        pattern = r'\b[A-Z0-9]{8}\b'
        matches = re.findall(pattern, text.upper())
        
        valid_codes = []
        for code in matches:
            # Lo·∫°i b·ªè code to√†n s·ªë ho·∫∑c to√†n ch·ªØ
            if not (code.isdigit() or code.isalpha()):
                valid_codes.append(code)
        
        return valid_codes
    
    def monitor(self, callback=None):
        """Theo d√µi Telegram li√™n t·ª•c"""
        print(f"üîç B·∫Øt ƒë·∫ßu theo d√µi Telegram chat: {self.chat_id}")
        self.running = True
        
        while self.running:
            try:
                updates = self.get_updates()
                
                if updates and updates.get('ok'):
                    for update in updates.get('result', []):
                        self.last_update_id = update['update_id']
                        
                        if 'message' in update:
                            message = update['message']
                            
                            # Ki·ªÉm tra c√≥ ph·∫£i t·ª´ chat target kh√¥ng
                            chat_id = str(message['chat']['id'])
                            if chat_id == self.chat_id or f"-{chat_id}" == self.chat_id:
                                
                                text = message.get('text', '')
                                timestamp = datetime.fromtimestamp(message['date']).strftime('%H:%M:%S')
                                sender = message.get('from', {}).get('first_name', 'Unknown')
                                
                                codes = self.extract_codes(text)
                                
                                if codes:
                                    print(f"\nüì® [{timestamp}] {sender}: {text[:50]}...")
                                    for code in codes:
                                        print(f"üéØ T√¨m th·∫•y code: {code}")
                                        
                                        # Callback ƒë·ªÉ x·ª≠ l√Ω code
                                        if callback:
                                            callback(code)
                
                time.sleep(2)  # Delay ƒë·ªÉ tr√°nh spam API
                
            except KeyboardInterrupt:
                print("\nüî¥ D·ª´ng theo d√µi Telegram...")
                self.running = False
                break
            except Exception as e:
                print(f"‚ùå L·ªói monitor: {e}")
                time.sleep(5)
    
    def start_monitoring(self, callback=None):
        """B·∫Øt ƒë·∫ßu theo d√µi trong thread ri√™ng"""
        monitor_thread = threading.Thread(target=self.monitor, args=(callback,))
        monitor_thread.daemon = True
        monitor_thread.start()
        return monitor_thread

def test_telegram():
    """Test Telegram monitor v·ªõi token demo"""
    print("üîç Test Telegram Pattern Extraction...")
    
    # Test messages
    test_messages = [
        "Hey everyone! Just a quick reminder about how we share referral codes ABC12345 and links in the community.",
        "I have code but only give ABCD1234 for you",
        "can u give me code XYZ98765",
        "Check this out: https://sodex.dev/ref/CODE123X",
        "My code is: BONUS789",  # To√†n ch·ªØ, s·∫Ω b·ªã lo·∫°i
        "Use code: 12345678",    # To√†n s·ªë, s·∫Ω b·ªã lo·∫°i
        "Valid codes: TEST1234, DEMO5678, WORK9ABC"
    ]
    
    monitor = TelegramMonitor("demo_token", "demo_chat")
    
    for msg in test_messages:
        codes = monitor.extract_codes(msg)
        if codes:
            print(f"üì® Message: {msg}")
            print(f"üéØ Extracted codes: {codes}")
            print("-" * 50)

if __name__ == "__main__":
    test_telegram()
